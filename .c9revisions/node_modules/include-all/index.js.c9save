{"ts":1385405013038,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var fs = require('fs');\nvar ltrim = require('underscore.string').ltrim;\n\n\n// Returns false if the directory doesn't exist\nmodule.exports = function requireAll(options) {\n  var files;\n  var modules = {};\n\n  // Sane default for `filter` option\n  if (!options.filter) {\n    options.filter = /(.*)/;\n  }\n\n  // Reset our depth counter the first time\n  if (typeof options._depth === 'undefined') {\n    options._depth = 0;\n  }\n\n  // Bail out if our counter has reached the desired depth\n  // indicated by the user in options.depth\n  if (typeof options.depth !== 'undefined' &&\n    options._depth >= options.depth) {\n    return;\n  }\n\n  // Remember the starting directory\n  if (!options.startDirname) {\n    options.startDirname = options.dirname;\n  }\n\n  try {\n    files = fs.readdirSync(options.dirname);\n  } catch (e) {\n    if (options.optional) return {};\n    else throw new Error('Directory not found: ' + options.dirname);\n  }\n\n  // Iterate through files in the current directory\n  files.forEach(function(file) {\n    var filepath = options.dirname + '/' + file;\n\n    // For directories, continue to recursively include modules\n    if (fs.statSync(filepath).isDirectory()) {\n\n      // Ignore explicitly excluded directories\n      if (excludeDirectory(file)) return;\n\n      // Recursively call requireAll on each child directory\n      modules[file] = requireAll({\n        dirname: filepath,\n        filter: options.filter,\n        pathFilter: options.pathFilter,\n        excludeDirs: options.excludeDirs,\n        startDirname: options.startDirname,\n        dontLoad: options.dontLoad,\n        markDirectories: options.markDirectories,\n\n        // Keep track of depth\n        _depth: options._depth+1,\n        depth: options.depth\n      });\n\n      if (options.markDirectories) {\n        modules[file].isDirectory = true;\n      }\n\n    }\n    // For files, go ahead and add the code to the module map\n    else {\n\n      // Key name for module\n      var identity;\n\n      // Filename filter\n      if (options.filter) {\n        var match = file.match(options.filter);\n        if (!match) return;\n        identity = match[1];\n      }\n\n      // Full relative path filter\n      if (options.pathFilter) {\n        // Peel off relative path\n        var path = filepath.replace(options.startDirname, '');\n\n        // make sure a slash exists on the left side of path\n        path = '/' + ltrim(path, '/');\n\n        var pathMatch = path.match(options.pathFilter);\n        if (!pathMatch) return;\n        identity = pathMatch[2];\n      }\n\n      // Load module into memory (unless `dontLoad` is true)\n      modules[identity] = options.dontLoad ? true : require(filepath);\n    }\n  });\n\n  // Pass map of modules back to app code\n  return modules;\n\n  function excludeDirectory(dirname) {\n    return options.excludeDirs && dirname.match(options.excludeDirs);\n  }\n};"]],"start1":0,"start2":0,"length1":0,"length2":2836}]],"length":2836}
