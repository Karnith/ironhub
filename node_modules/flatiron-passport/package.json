{
  "name": "flatiron-passport",
  "version": "0.0.9",
  "description": "Passport.js integration into Flatiron web framework.",
  "author": {
    "name": "Travis Tidwell",
    "email": "travist349@gmail.com",
    "url": "http://github.com/travist"
  },
  "homepage": "http://github.com/travist/flatiron-passport",
  "repository": {
    "type": "git",
    "url": "git://github.com/travist/flatiron-passport.git"
  },
  "bugs": {
    "url": "http://github.com/travist/flatiron-passport/issues"
  },
  "main": "./flatiron-passport.js",
  "dependencies": {
    "passport": ">=0",
    "connect": ">=0",
    "flatiron": ">=0",
    "union": ">=0.3.6"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "flatiron",
    "passport",
    "auth",
    "authn",
    "authentication"
  ],
  "readme": "Passport.js integration for FlatIron web framework.\n===================================================\n\nThis package allows [Flatiron.js](http://flatironjs.org) applications to easily use the [Passport.js](http://passportjs.org)\nauthentication framework.\n\nThere are only two things that are different between using this API and using the regular Passport API.\n\n1.)  Instead of calling...\n\n```javascript\nvar express = require('express');\nvar passport = require('passport');\nvar app = express();\n// ... BOILERPLATE SETUP CODE GOES HERE ...\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\nYou simply need to call...\n```javascript\nvar flatiron =      require('flatiron');\nvar fipassport =    require('flatiron-passport');\nvar app =           flatiron.app;\n// ... BOILERPLATE SETUP CODE GOES HERE ...\napp.use(fipassport);\n```\n\n\n2.)  Now anywhere you would use the variable ```passport```, you replace that with ```fipassport``` in your app, like so...\n\n```javascript\npassport.use(new LocalStrategy(function(username, password, done) {\n  ...\n  ...\n});\n\npassport.serializeUser(function(user, done) {\n  ...\n  ...\n});\n\npassport.deserializeUser(function(id, done) {\n  ...\n  ...\n});\n\npassport.authenticate(.....)\n```\n\nYou simply call this instead...\n```javascript\nfipassport.use(new LocalStrategy(function(username, password, done) {\n  ...\n  ...\n});\n\nfipassport.serializeUser(function(user, done) {\n  ...\n  ...\n});\n\nfipassport.deserializeUser(function(id, done) {\n  ...\n  ...\n});\n\nfipassport.authenticate(.....)\n```\n\nPlease refer to the included example to get a better idea....\n\nInstall\n------------------------\n```\nnpm install flatiron-passport\n```\n\nExample:  From the example folder...\n------------------------\n```javascript\nvar fs =            require('fs')\nvar flatiron =      require('flatiron');\nvar LocalStrategy = require('passport-local').Strategy\nvar fipassport =    require('flatiron-passport');\nvar app =           flatiron.app;\n\n// You would not usually have these lines...\n// This is just to store the username in memory.\nvar global_user = '';\nvar global_pass = '';\n\n// Use the passport strategy.\nfipassport.use(new LocalStrategy(function(username, password, done) {\n\n  // You would not normally have these lines...\n  // This is just to store it in memory for use later.\n  global_user = username;\n  global_pass = password;\n\n  // Use this as you normally would in Passport.js.\n  // But for now just\n  // hard-code the user object.\n  done(null, {\n    id: 1234,\n    username: username,\n    password: password\n  });\n}));\n\n// Serialize based on the user ID.\nfipassport.serializeUser(function(user, done) {\n\n  // @todo: Save your user to the database using the ID as a key.\n  done(null, user.id);\n});\n\n// Load the user and return it to passport.\nfipassport.deserializeUser(function(id, done) {\n\n  // @todo:  Load your user here based off of the ID, and call done with\n  // that user object.\n  done(null, {\n    id:id,\n    username:global_user,\n    password:global_pass\n  });\n});\n\n// Use http and flatiron-passport.\napp.use(flatiron.plugins.http);\napp.use(fipassport);\n\n// Get the front page.\napp.router.get('/', function() {\n  if (this.req.isAuthenticated()) {\n    this.res.end('Hello ' + this.req.user.username);\n  }\n  else {\n    fs.readFile('index.html', (function(self) {\n      return function(err, data) {\n        if(err) {\n          self.res.writeHead(404);\n          self.res.end();\n          return;\n        }\n        self.res.writeHead(200, {'Content-Type': 'text/html'});\n        self.res.end(data);\n      };\n    })(this));\n  }\n});\n\n/**\n * Here the API to fipassport.authenticate is the exact same as it would\n * be fore passport.authenticate.  It is just a simple wrapper around that\n * function.\n */\napp.router.post('/login', fipassport.authenticate('local', {\n  successRedirect: '/',\n  failureRedirect: '/login'\n}));\n\n// Start our server at port 3000.\napp.start(3000, function(){\n  console.log('HTTP Server started on port 3000');\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "flatiron-passport@0.0.9",
  "dist": {
    "shasum": "d275cc6667094ff746a581009908f8e5c33abb2b"
  },
  "_from": "flatiron-passport@",
  "_resolved": "https://registry.npmjs.org/flatiron-passport/-/flatiron-passport-0.0.9.tgz"
}
